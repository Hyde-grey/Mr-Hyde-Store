/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/ChromeHeartRingModel/Chromering.glb --types 
*/
//@ts-nocheck
import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useScroll } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    _gltfNode_0: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function ChromeRingModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/ChromeHeartRingModel/ChromeRing.glb"
  ) as GLTFResult;

  const ref = useRef<THREE.Group>(null);
  const scroll = useScroll();

  useFrame(() => {
    if (ref.current) {
      ref.current.rotation.y += 0.001;
      ref.current.rotation.x = initialRotation.x + scroll.offset * Math.PI * 1;
    }
  });

  const initialRotation = { x: 0, y: Math.PI / 3.5, z: 0 };

  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh
        scale={0.13}
        geometry={nodes._gltfNode_0.geometry}
        material={materials["Material.001"]}
        position={[0, 0, 0]}
        rotation={[initialRotation.x, initialRotation.y, initialRotation.z]}
      />
    </group>
  );
}

useGLTF.preload("/ChromeHeartRingModel/ChromeRing.glb");
